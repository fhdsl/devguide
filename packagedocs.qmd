# Documentation {{< iconify fa6-solid book >}} {#sec-docs}

All formally supported DaSL R and Python packages should have package documentation.

## R

We use the [pkgdown][] package to create documentation for R packages, and host it on [GitHub Pages][ghpages]. To get started with `pkgdown`, in R within the root of your package run [usethis::use_pkgdown_github_pages()](https://usethis.r-lib.org/reference/use_pkgdown.html) - it will set up a `_pkgdown.yml` file in the root of your repo used to configure `pkgdown`, and add a `.github/workflows/publish.yml` file to build the package documentation on each push, pull request, or release. See [pkgdown documentation][pkgdown] for details on configuring documentation.

After pushing the above changes up to your repository, go to the Actions tab and you should see the new `publish` action running. It will build and then deploy the rendered package docs. The URL for your docs will vary depending on the GitHub organization your repository lives within. For WILDS, the base URL for now is `https://getwilds.github.io`. If your pacakge was in the WILDS org (at `https://github.com/getwilds`) your package (named `mypkg`) docs would live at `https://getwilds.github.io/mypkg`.

You can also build `pkgdown` docs locally - after running `usethis::use_pkgdown()` or `usethis::use_pkgdown_github_pages()` - by running `pkgdown::build_site()`. If you run `build_site()` within RStudio it should open up your site in your default browser, but may not do so if you run in a terminal. You can open the site in your browser by navigating to and opening the file `docs/index.html` within your repo.

### DaSL pkgdown template

We are planning to have a DaSL specific `pkgdown` "package template" (see [pkgdown docs][pkgdowntemp] for what this means) - but it's not ready to use yet. When it is ready, you will be able to specify our template like:

```yml
template:
  package: dasltemplate
```

For now just use the default theme that `pkgdown` provides.

## Python

Just like there's a variety of ways to do packing in Python there's a variety of documentation options. Two of the well known options are:

- [Sphinx][] - been around longer, uses [reStructuredText][rst]
- [MkDocs][] - newcomer, used [Markdown][md]

For either of the options above, they can be hosted in many places, including [GitHub Pages][ghpages] and [ReadTheDocs][rtd].

`Sphinx` and `MkDocs` are less automatic relative to `pkgdown`, so just be prepared for a bit more manual work.

## Guidelines

- README: This is most likely the first place potential users will interact with your package. Make sure the README clearly states what the package does, and how to get started.
- Examples: All user facing functions should have examples. Make sure to be careful about how examples are run if there's any sensitive data or connections to remote services.
- (anything else?)

[pkgdown]: https://pkgdown.r-lib.org/
[rtd]: https://about.readthedocs.com/
[Sphinx]: https://www.sphinx-doc.org/
[mkdocs]: https://www.mkdocs.org/
[pkgdowntemp]: https://pkgdown.r-lib.org/articles/customise.html#template-packages
[ghpages]: https://pages.github.com/
[rst]: https://docutils.sourceforge.io/rst.html
[md]: https://www.markdownguide.org/
