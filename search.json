[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DaSL Contributor Guide",
    "section": "",
    "text": "Welcome\nThis book is a resource for anyone in the Fred Hutch Cancer Center Data Science Lab community contributing to or using software.\nThe book attempts to cover all important aspects of software development, including how to get involved in software as a user or contributor, code style, code review, package documentation, and more. It includes both internal facing guidelines as well as for any contributions from folks other than DaSL staff."
  },
  {
    "objectID": "index.html#inspiration",
    "href": "index.html#inspiration",
    "title": "DaSL Contributor Guide",
    "section": "Inspiration",
    "text": "Inspiration\nInspiration for this guide is taken in part from:\n\nTidyverse Style Guide\nrOpenSci Dev Guide"
  },
  {
    "objectID": "help.html#house-calls",
    "href": "help.html#house-calls",
    "title": "1  Help ",
    "section": "1.1 House Calls",
    "text": "1.1 House Calls\nData House Calls are quick consultations with DaSL staff to get help on data related questions. Fred Hutch staff (and collaborators) can connect with DaSL staff who have expertise on specific topics, or schedule a General Data House Call.\nSchedule a house call here  https://calendly.com/data-house-calls"
  },
  {
    "objectID": "help.html#slack",
    "href": "help.html#slack",
    "title": "1  Help ",
    "section": "1.2 Slack",
    "text": "1.2 Slack\nFred Hutch folks can chat with other community members and DaSL and Fred Hutch SciComp staff in the Fred Hutch Data Slack.\nJoin our Slack here  https://hutchdatascience.org/joinslack/"
  },
  {
    "objectID": "contributing.html#code-of-conduct",
    "href": "contributing.html#code-of-conduct",
    "title": "2  Contributing ",
    "section": "2.1 Code of Conduct",
    "text": "2.1 Code of Conduct\nxxxx"
  },
  {
    "objectID": "contributing.html#communication-channels",
    "href": "contributing.html#communication-channels",
    "title": "2  Contributing ",
    "section": "2.2 Communication Channels",
    "text": "2.2 Communication Channels\n\nSlack"
  },
  {
    "objectID": "contributing.html#github-repositories",
    "href": "contributing.html#github-repositories",
    "title": "2  Contributing ",
    "section": "2.3 GitHub Repositories",
    "text": "2.3 GitHub Repositories\nxxxx"
  },
  {
    "objectID": "style.html#package-styler",
    "href": "style.html#package-styler",
    "title": "3  Style ",
    "section": "3.1 Package styler",
    "text": "3.1 Package styler\nThe styler package allows you to interactively format your code according to the tidyverse style guide.\nThe lintr package does automated checks of your code according to the style guide."
  },
  {
    "objectID": "style.html#ide-and-text-editor-support",
    "href": "style.html#ide-and-text-editor-support",
    "title": "3  Style ",
    "section": "3.2 IDE and Text editor support",
    "text": "3.2 IDE and Text editor support\nRStudio supports styler via the Addins drop down; see the RStudio User Guide.\nSupport for styler in other editors is provided via the R languageserver:\n\nVSCode: vscode-R\nAtom: atom-ide-r\nSublime Text: R-IDE\nVim/NeoVim: LanguageClient-neovim\n\nSee the R languageserver GitHub repository for more information on using the R languageserver."
  },
  {
    "objectID": "codereview.html#dasl-interal-guidelines",
    "href": "codereview.html#dasl-interal-guidelines",
    "title": "4  Code review ",
    "section": "4.1 DaSL interal guidelines",
    "text": "4.1 DaSL interal guidelines\nxxxx"
  },
  {
    "objectID": "codereview.html#community-guidelines",
    "href": "codereview.html#community-guidelines",
    "title": "4  Code review ",
    "section": "4.2 Community guidelines",
    "text": "4.2 Community guidelines\nxxxx"
  },
  {
    "objectID": "packagedocs.html#r",
    "href": "packagedocs.html#r",
    "title": "5  Documentation ",
    "section": "5.1 R",
    "text": "5.1 R\nWe use the pkgdown package to create documentation for R packages, and host it on GitHub Pages. To get started with pkgdown, in R within the root of your package run usethis::use_pkgdown_github_pages() - it will set up a _pkgdown.yml file in the root of your repo used to configure pkgdown, and add a .github/workflows/publish.yml file to build the package documentation on each push, pull request, or release. See pkgdown documentation for details on configuring documentation.\nAfter pushing the above changes up to your repository, go to the Actions tab and you should see the new publish action running. It will build and then deploy the rendered package docs. The URL for your docs will vary depending on the GitHub organization your repository lives within. For WILDS, the base URL for now is https://getwilds.github.io. If your pacakge was in the WILDS org (at https://github.com/getwilds) your package (named mypkg) docs would live at https://getwilds.github.io/mypkg.\nYou can also build pkgdown docs locally - after running usethis::use_pkgdown() or usethis::use_pkgdown_github_pages() - by running pkgdown::build_site(). If you run build_site() within RStudio it should open up your site in your default browser, but may not do so if you run in a terminal. You can open the site in your browser by navigating to and opening the file docs/index.html within your repo.\n\n5.1.1 DaSL pkgdown template\nWe are planning to have a DaSL specific pkgdown “package template” (see pkgdown docs for what this means) - but it’s not ready to use yet. When it is ready, you will be able to specify our template like:\ntemplate:\n  package: dasltemplate\nFor now just use the default theme that pkgdown provides."
  },
  {
    "objectID": "packagedocs.html#python",
    "href": "packagedocs.html#python",
    "title": "5  Documentation ",
    "section": "5.2 Python",
    "text": "5.2 Python\nJust like there’s a variety of ways to do packing in Python there’s a variety of documentation options. Two of the well known options are:\n\nSphinx - been around longer, uses reStructuredText\nMkDocs - newcomer, used Markdown\n\nFor either of the options above, they can be hosted in many places, including GitHub Pages and ReadTheDocs.\nSphinx and MkDocs are less automatic relative to pkgdown, so just be prepared for a bit more manual work."
  },
  {
    "objectID": "packagedocs.html#guidelines",
    "href": "packagedocs.html#guidelines",
    "title": "5  Documentation ",
    "section": "5.3 Guidelines",
    "text": "5.3 Guidelines\n\nREADME: This is most likely the first place potential users will interact with your package. Make sure the README clearly states what the package does, and how to get started.\nExamples: All user facing functions should have examples. Make sure to be careful about how examples are run if there’s any sensitive data or connections to remote services.\n(anything else?)"
  },
  {
    "objectID": "versioning.html#package-version-numbers",
    "href": "versioning.html#package-version-numbers",
    "title": "6  Package versioning ",
    "section": "6.1 Package version numbers",
    "text": "6.1 Package version numbers\nThere’s quite a bit of nuance - and surprises - to package version numbers - see the Package version number section for details. For example, using the utils::package_version() function, which parses package version strings into S3 classes, we get a suprising result:\n\n\"2.0\" &gt; \"10.0\"\n#&gt; [1] TRUE\npackage_version(\"2.0\") &gt; package_version(\"10.0\")\n#&gt; [1] FALSE\n\nWith that example, please do think about your package versions before setting them.\n\n6.1.1 DaSL Conventions\nFollowing the Tidyverse package version conventions, DaSL packages will use the following conventions (see the link for more details):\n\nAlways use . as the separator, never use -.\nA released version number consists of three components, &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;\nWhile a package is in between releases, there is a fourth component: the development version, starting at 9000 (e.g., 0.2.2.9000), and incrementing from there until the package has another release at which point return to three components."
  },
  {
    "objectID": "versioning.html#ignore-these",
    "href": "versioning.html#ignore-these",
    "title": "6  Package versioning ",
    "section": "6.2 Ignore these",
    "text": "6.2 Ignore these\nWe are not following or enforcing any rules about changes at the function/class/etc level below the package level. For example, the R Packages book talks about using the lifecycle package to deal with function changes."
  }
]